import pygamefrom pygame.locals import *import timeimport randomfrom tkinter import *import osimport json# sys.stdout.flush() - realne vykonanie time.sleepclass Game:    def __init__(self, main_attributes, current_ship_attributes):        # --- set pygame window position ---        os.environ['SDL_VIDEO_WINDOW_POS'] = "%d,%d" % (150, 150)        # ---        # --- set attributes ---        self.alert = None        self.main_attributes, self.current_ship_attributes = main_attributes, current_ship_attributes        #print(current_ship_attributes)        self.id = main_attributes["id"]        self.current_level = main_attributes["current_level"]        self.current_ship = main_attributes["current_ship"]        self.coins = main_attributes['coins']        self.kills = main_attributes["kills"]        self.enemy_left = current_ship_attributes["shield"]        self.ship_speed = current_ship_attributes["speed"]        self.ship_guns = current_ship_attributes["guns"]        self.ship_loading = current_ship_attributes["loading"]        self.ship_magazine = current_ship_attributes["magazine"]        # ---        pygame.display.init()        pygame.font.init()        self.display_width, self.display_high = 800, 700        self.gameDisplay = pygame.display.set_mode((self.display_width, self.display_high))        pygame.display.set_caption("Space war")        self.clock = pygame.time.Clock()        # --- image section ---        self.shipImg = pygame.image.load(f"vektor/hotove/ships/spaceship{self.current_ship}.png")        self.backGroundImg = pygame.image.load(f"vektor/hotove/bg/space_{self.current_level}.png")        self.enemyImg = pygame.image.load("vektor/hotove/enemy/enemy_1.png")        # --- end of image section ---        # --- parameters section ---        self.ship_width = 65        # --- end of parameters section ---        # --- level parameters section ---        # --- end of level parameters section ---        # --- object arrays ---        self.shoots_array = []        self.enemy_array = []        # --- end of object arrays ---        self.loading_class = None        # --- start of the game ---        self.game_loop()        # --- end of the game ---        pygame.quit()    # --- main definition section ---    def update_file(self):        # print(attributes)        with open("playersInfo.json", "r") as file:            data = json.load(file)            for person in data["players"]:                if person["id"] == self.id:                    person["coins"] = self.coins                    person["kills"] = self.kills        with open("playersInfo.json", "w") as file:            json.dump(data, file, indent=2)    def paused(self, text, *option):        # self.main_attributes["coins"], self.main_attributes["kills"] = self.coins, self.kills        # self.alert = AlertWindow(self.main_attributes, self.current_ship_attributes, "Are you sure you want to exit?", "Game interrupted..", "no", "yes")        paused = True        while paused:            for event in pygame.event.get():                if event.type == pygame.KEYDOWN:                    if event.key == pygame.K_ESCAPE:                        paused = False                if event.type == pygame.KEYDOWN:                    if event.key == pygame.K_q:                        self.update_file()                        pygame.quit()                if text == "Game over!" and event.type == pygame.KEYDOWN:                    if event.key == pygame.K_a:                        self.update_file()                        Game(self.main_attributes, self.current_ship_attributes)            self.gameDisplay.fill((0, 0, 0, 200))            self.game_paused_message(text, *option)            pygame.display.update()            self.clock.tick(10)    def bg(self):        self.gameDisplay.blit(self.backGroundImg, [0, 0])    def ship(self, x, y):        self.gameDisplay.blit(self.shipImg, (x, y))    def hit_enemy(self):        ...    def hit_player(self):        ...    def game_paused_message(self, text, *option):        font1 = pygame.font.SysFont(None, 40)        font2 = pygame.font.SysFont(None, 25)        text = font1.render(f"{text}", True, (255, 255, 255))        option1, option2 = option        options = font2.render(f"press {option1} or {option2}", True, (255, 255, 255))        self.gameDisplay.blit(text, (self.display_width // 2 - 100, self.display_high // 2 - 20))        self.gameDisplay.blit(options, (self.display_width // 2 - 140, self.display_high // 2 + 20))    def reloading_update(self, num):        # print("None? ", self.loading_class)        if not self.loading_class:            # print("loaded", self.loading_class)            font = pygame.font.SysFont(None, 25)            text = font.render(f"charger loaded: {num}", True, (255, 255, 255))            self.gameDisplay.blit(text, (self.display_width - 180, self.display_high - 30))        else:            # print("loading")            font = pygame.font.SysFont(None, 25)            text = font.render(f"charger reloaded in: {num}", True, (255, 255, 255))            self.gameDisplay.blit(text, (self.display_width - 200, self.display_high - 30))    def money_earned_display(self, num):        font = pygame.font.SysFont(None, 25)        text = font.render("$ " + str(num), True, (255, 255, 255))        self.gameDisplay.blit(text, (self.display_width - 100, 20))    def enemy_killed_display(self, num):        font = pygame.font.SysFont(None, 25)        text = font.render("killed: " + str(num), True, (255, 255, 255))        self.gameDisplay.blit(text, (self.display_width - 100, 40))    def enemy_left_display(self, enemy_left):        font = pygame.font.SysFont(None, 25)        text = font.render("enemy left: " + str(enemy_left), True, (255, 255, 255))        self.gameDisplay.blit(text, (20, 20))    # --- end of main definition section ---    # --- classes ---    class WaitSomeTime:        def __init__(self, cool_down):            self.last = pygame.time.get_ticks()            self.cool_down = cool_down            # self.fire(cool_down)        def reloading(self):            # fire gun, only if cooldown has been 0.3 seconds since last            now = pygame.time.get_ticks()            if now - self.last >= self.cool_down:                self.last = now                return False            return [True, (now - self.last) // 1000]    class Shoot:        def __init__(self, gun, pos_x, pos_y, hit=False):            self.shootImg = pygame.image.load(f"vektor/hotove/ships/shoots/shoot{gun}.png")            self.pos_x = pos_x            self.pos_y = pos_y            # self.hit = hit        def update(self, atr):            atr.blit(self.shootImg, (self.pos_x, self.pos_y))    class Enemy:        def __init__(self, pos_x, pos_y, hit=False):            self.pos_x = pos_x            self.pos_y = pos_y            self.speed = random.randint(3, 15)            # self.hit = hit            self.meteorImg = pygame.image.load(f"vektor/hotove/enemy/meteorit_1.png")        def update(self, atr):            atr.blit(self.meteorImg, (self.pos_x, self.pos_y))    # --- end of class section ---    # --- main loop ---    # pygame.time.set_timer(pygame.K_r, 1000)    def game_loop(self):        x = (self.display_width * 0.45)        y = (self.display_high * 0.85)        game_exit = False        x_change = 0        right, left = True, True        while not game_exit:            for event in pygame.event.get():                if event.type == pygame.QUIT:                    self.main_attributes["coins"], self.main_attributes["kills"] = self.coins, self.kills                    self.paused("Do you really want to quit?", "ESC to stay", "Q to leave")                elif event.type == pygame.KEYDOWN:                    if event.key == pygame.K_ESCAPE:                        self.paused("Game paused!", "ESC to continue", "Q to quit")                if event.type == pygame.KEYDOWN:                    if event.key == pygame.K_LEFT and left:                        right = True                        # if x - self.ship_speed > -20:                        x_change = -self.ship_speed                    elif event.key == pygame.K_RIGHT and right:                        # if x + self.ship_speed < self.display_width + 20:                        left = True                        x_change = self.ship_speed                    elif event.key == pygame.K_SPACE and self.ship_magazine > 0:                        self.shoots_array.append(self.Shoot(self.ship_guns, x, y + 5))                        self.ship_magazine -= 1                        if self.ship_magazine == 0:                            self.loading_class = self.WaitSomeTime(self.ship_loading * 1000)                    elif event.key == pygame.K_r and self.ship_magazine > 0:                        self.ship_magazine = 0                        self.loading_class = self.WaitSomeTime(self.ship_loading * 1000)                if event.type == pygame.KEYUP:                    if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:                        x_change = 0            self.bg()            self.ship(x, y)            self.money_earned_display(self.coins)            self.enemy_killed_display(self.kills)            self.enemy_left_display(self.enemy_left)            if self.loading_class:                # print("existujem")                if isinstance(self.loading_class.reloading(), list):                    # print("kolko", self.loading_class.reloading())                    self.reloading_update(self.ship_loading - self.loading_class.reloading()[1])                else:                    # print("rusim")                    self.loading_class, self.ship_magazine = None, self.current_ship_attributes["magazine"]            else:                # print("neexistujem")                self.reloading_update(self.ship_magazine)            x += x_change            if self.display_width + 10 < x < -20 :                self.paused("You crashed!", "A to play again", "Q to quit")            # --- upload images ---            for enemy in self.enemy_array:                for shoot in self.shoots_array:                    if abs(enemy.pos_y + 67 - shoot.pos_y) < 5:                        if abs((enemy.pos_x + 32) - (shoot.pos_x + 16)) < 48:                            self.enemy_array.remove(enemy)                            self.shoots_array.remove(shoot)                            # shoot.hit, enemy.hit = True, True                            # self.enemy_left -= 1                            self.enemy_left_display(self.enemy_left)                            self.kills += 1                            self.coins += 5                if abs(enemy.pos_y - self.display_high * 0.85) <= 25:                    if abs(enemy.pos_x - x) <= self.ship_width:                        self.main_attributes["coins"], self.main_attributes["kills"] = self.coins, self.kills                        self.paused("Game over!", "A to play again", "Q to quit")            for shoot in self.shoots_array:                shoot.pos_y -= 10                if shoot.pos_y < -5:                    self.shoots_array.remove(shoot)                else:                    shoot.update(self.gameDisplay)            for enemy in self.enemy_array:                enemy.pos_y += enemy.speed                if enemy.pos_y > self.display_high + 10:                    self.enemy_left -= 1                    self.enemy_array.remove(enemy)                else:                    enemy.update(self.gameDisplay)            if self.enemy_left <= 0:                self.bg()                self.ship(x, y)                self.money_earned_display(self.coins)                self.enemy_killed_display(self.kills)                self.enemy_left_display(self.enemy_left)                self.main_attributes["coins"], self.main_attributes["kills"] = self.coins, self.kills                self.paused("Game over!", "A to play again", "Q to quit")            # --- end of uploading ---            # --- create enemy section ---            if random.randint(1, 15 - self.current_level) == 1:                self.enemy_array.append(self.Enemy(random.randint(20, 680), -10))            # --- end of creating enemy section ---            # --- hit checking section ---            # --- end of hit checking section ---            pygame.display.update()            self.clock.tick(60)    # --- end of main loop ---    pygame.quit()if __name__ == '__main__':    Game(...)